version: '3'
name: "scamazon"
# Here we are creating a network that will be used by all of our services, called my_network. This is the only way that the services can communicate with each other.
networks:
  my_network:
    driver: bridge
# Creates a folder that will keep the data of the database saved. For each service, a folder is created.
volumes:
  mongo-product-service-data:
  mongo-user-service-data:
  mongo-order-service-data:
  

# This is the configuration for the frontend service. It is the only service that is exposed to the outside world.
services:

  frontend-service:
    image: svenpaj/frontend-service:1.0.1
    networks:
      - my_network
    ports:
      - "4004:4004"
    
      
# This is the configuration for the backend services. They are not exposed to the outside world.
# This is storing the logs from our services, about how many clicks, how many times we are asking the databases anything, etc.
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9092:9090"
    networks:
      - my_network
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yaml
# This is a visualization tool for the logs that we are storing in prometheus.  
  grafana:
    image: grafana/grafana
    restart: always
    ports:
      - 3005:3000
    networks:
      - my_network
# This is the configuration for the backend services. They are not exposed to the outside world.
# This is one of the backend services. It is the product service. It is responsible for the products that we are selling.
# This is just letting the frontend service talk with the product service.
  product-catalog-service:
    image: svenpaj/product-service:1.0.0
    networks:
      - my_network
    ports:
      - "4005:4005"
    depends_on:
      mongo-1:
        condition: service_healthy
# This server has a database that is storing the products that we are selling.
  mongo-1:
    image: mongo
    restart: always
    networks:
      - my_network
    volumes:
      - ./mongo-product-service-data:/data/db
      - ./init/init-mongo-products.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: echo 'mongo.runCommand("ping").ok' | mongosh mongo-1:27017 --quiet
      interval: 10s
      timeout: 10s
      retries: 20
      start_period: 200s
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: allProducts
# This is a tool that is visualizing the database that we are using for the product service.
# This tool lets us manipulate the database in our browser.
  mongo-express-1:
    image: mongo-express
    restart: always
    ports:
      - 8082:8081
    networks:
      - my_network
    depends_on:
      mongo-1:
        condition: service_healthy
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo-1:27017/
# This is the configuration for the backend services. They are not exposed to the outside world.
# This is one of the backend services. It is the user service. It is responsible for the users we are handling.
# This is just letting the frontend service talk with the user service.
  user-management-service:
    image: svenpaj/user-service:1.0.0
    networks:
      - my_network
    ports:
      - "4006:4006"
    depends_on:
      mongo-2:
        condition: service_healthy

# This server has a database that is storing the users.
  mongo-2:
    image: mongo
    restart: always
    networks:
      - my_network
    volumes:
      - ./mongo-user-service-data:/data/db
      - ./init/init-mongo-users.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    healthcheck:
      test: echo 'mongo.runCommand("ping").ok' | mongosh mongo-2:27017 --quiet
      interval: 10s
      timeout: 10s
      retries: 20
      start_period: 200s
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: allUsers
# This is a tool that is visualizing the database that we are using for the product service.
# This tool lets us manipulate the database in our browser.
  mongo-express-2:
    image: mongo-express
    restart: always
    ports:
      - 8083:8081
    networks:
      - my_network
    depends_on:
      mongo-2:
        condition: service_healthy
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo-2:27017/
# This is the configuration for the backend services. They are not exposed to the outside world.
# This is one of the backend services. It is the product service. It is responsible for the orders we handle.
# This is just letting the frontend service talk with the order service.
  order-processing-service:
    image: svenpaj/order-service:1.0.0
    networks:
      - my_network
    ports:
      - "4007:4007"
    depends_on:
      mongo-3:
        condition: service_healthy

# This server has a database that is storing the orders we are processing.
  mongo-3:
    image: mongo
    restart: always
    networks:
      - my_network
    volumes:
      - ./mongo-order-service-data:/data/db
      - ./init/init-mongo-orders.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    healthcheck:
      test: echo 'mongo.runCommand("ping").ok' | mongosh mongo-3:27017 --quiet
      interval: 10s
      timeout: 10s
      retries: 20
      start_period: 200s
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: allOrders
# This is a tool that is visualizing the database that we are using for the product service.
# This tool lets us manipulate the database in our browser.
  mongo-express-3:
    image: mongo-express
    restart: always
    ports:
      - 8084:8081
    networks:
      - my_network
    depends_on:
      mongo-3:
        condition: service_healthy
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo-3:27017/